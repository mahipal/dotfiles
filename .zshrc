# Basics
bindkey -v
setopt auto_cd beep extended_glob no_match
unsetopt notify
typeset -U path
typeset -U fpath

# History Mechanism
HISTFILE=~/.zsh/.histfile
HISTSIZE=10000
SAVEHIST=10000
setopt hist_verify
setopt append_history inc_append_history share_history extended_history
setopt hist_ignore_dups hist_expire_dups_first

# Prompt
export PS1='%F{242}(%*)%f %F{47}%#%f %F{242}%n %M%f %~ %F{47}%#%f '

# ls (BSD)
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
export CLICOLOR=1

# ls (GNU)
# TODO: LS_COLORS and ls alias

# grep
# GREP_OPTIONS is deprecated, so use an alias instead.
alias grep='grep --color=auto'

# Completion System Basics (lines generated by compinstall)
zstyle ':completion:*' auto-description '%d'
zstyle ':completion:*' completer _expand _complete _ignored
zstyle ':completion:*' completions 1
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' format '%d:'
zstyle ':completion:*' glob 1
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*' insert-unambiguous false
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list ''
zstyle ':completion:*' menu select=1
zstyle ':completion:*' original true
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s (%l)'
zstyle ':completion:*' substitute 1
zstyle ':completion:*' verbose true
zstyle :compinstall filename '/Users/paul/.zshrc'
autoload -Uz compinit
compinit

# Git
gl() {
paste -d' ' <(git log --color --pretty=format:'%ai' "$@") <(git log --color --oneline --decorate "$@")
}
gsync() {
  git checkout master
  # Mirror the defaults in .gitconfig.
  git fetch origin --prune
  git rebase FETCH_HEAD
}

# git auto-completion
# Place the 2 necessary files for zsh git completion in the ~/.zsh/ directory.
# See: https://github.com/git/git/blob/master/contrib/completion/git-completion.zsh
# On Homebrew systems, see: /usr/local/share/zsh/site-functions/
fpath=(~/.zsh $fpath)

# git prompt
# Place git-prompt.sh in the ~/.zsh/ directory.
# See: https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh
# On Homebrew systems, see: /usr/local/etc/bash_completion.d/git-prompt.sh
git_promptable="$HOME/.zsh/git-prompt.sh"
if [[ -f $git_promptable ]]; then
  source $git_promptable
  export GIT_PS1_SHOWDIRTYSTATE=true
  export GIT_PS1_SHOWUNTRACKEDFILES=true
  # Colors only work when using precmd() (rather than setting PS1 directly).
  export GIT_PS1_SHOWCOLORHINTS=true
  precmd() { __git_ps1 '%F{242}(%*)%f %F{47}%#%f %F{242}%n %M%f %~ ' '%F{47}%#%f ' '(%s) ' }
fi

# On OS X, preserve the standard Terminal/bash behavior where new tabs
# open in the current working directory.
if [[ $OSTYPE == *darwin* ]]; then
  # inspired by Apple's implementation in /etc/bashrc and http://superuser.com/a/328148
  # Tell the terminal about the working directory at each prompt.
  if [[ "$TERM_PROGRAM" == "Apple_Terminal" ]] && [[ -z "$INSIDE_EMACS" ]]; then
    update_terminal_cwd() {
      # Identify the directory using a "file:" scheme URL, including
      # the host name to disambiguate local vs. remote paths.

      # Percent-encode the pathname.
      local URL_PATH=''
      {
        # Use LANG=C to process text byte-by-byte.
        local i ch hexch LANG=C
        for ((i = 1; i <= ${#PWD}; ++i)); do
          ch="$PWD[i]"
          if [[ "$ch" =~ [/._~A-Za-z0-9-] ]]; then
            URL_PATH+="$ch"
          else
            hexch=$(printf "%02X" "'$ch")
            URL_PATH+="%$hexch"
          fi
        done
      }

      local PWD_URL="file://$HOST$URL_PATH"
      printf '\e]7;%s\a' "$PWD_URL"
    }

    # Register the function to be called whenever the working directory changes.
    autoload add-zsh-hook
    add-zsh-hook chpwd update_terminal_cwd

    # Tell the terminal about the initial directory.
    update_terminal_cwd
  fi
fi

# Ruby
export RACK_ENV=development
alias b="bundle exec"

# rbenv
if [[ -d "$HOME/.rbenv" ]]; then
  path=("$HOME/.rbenv/bin" $path)
  eval "$(rbenv init -)"
fi
